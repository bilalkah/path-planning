# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Check Tests

on:
  pull_request:
    branches: [ "main" ]
    types: [opened, labeled, unlabeled, synchronize]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  check_ci_label:
    runs-on: ubuntu-latest

    steps:
      - name: Check for 'ci' label
        run: |
          labels="$(gh api repos/$OWNER/$REPO_NAME/pulls/$PULL_REQUEST_NUMBER --jq '.labels.[].name')"
          echo "$labels"
          for label in $labels; do
            if [ "$label" == "ci" ]; then
            echo "Label contains 'ci'"
            # Add your CI/CD tasks here
            exit 0
            fi
          done
          exit 1
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}
  format:
    needs: check_ci_label
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # check out HEAD on the branch
          ref: ${{ github.head_ref }}
          # make sure the parent commit is grabbed as well, because
          # that's what will get formatted (i.e. the most recent commit)
          fetch-depth: 2
      - name: Install clang-format
        run: |
          sudo apt-get install -y clang-format
      - name: Run clang-format
        run: |
          # run clang-format on all files in the repo
          # (except for the .git and .vscode directory) and use .clang-format
          # as the style guide
          find . -not -path "./.git/*" -not -path "./.vscode/*" -name "*.cpp" -o -name "*.h" | xargs clang-format -i -style=file
      # commit the changes (if there are any)
      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4.1.2
        with:
          commit_message: ðŸŽ¨ apply clang-format changes
          branch: ${{ github.head_ref }}
  build:
    needs: check_ci_label
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsfml-dev

    - name: Set up Cache
      uses: actions/cache@v3
      with:
        path: |
          # Add paths to directories you want to cache here
          /usr/include/SFML
          /usr/lib/x86_64-linux-gnu/cmake/SFML
        key: sfml-cache-${{ runner.os }}-${{ hashFiles('**/*.yml') }}
        restore-keys: |
          sfml-cache-${{ runner.os }}-
          sfml-cache-

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C --verbose ${{env.BUILD_TYPE}} 

